# Run tests
# Run a rehearsal of the publishing process to TestPyPI

name: Development Workflow

on:
  push:
    branches: [ "dev" ]
    tags: [ "v0.1.*" ]
  pull_request:
    branches: [ "dev" ]

jobs:

  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:

    - uses: actions/checkout@v4.1.1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      if: success()
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        python -m poetry config virtualenvs.create false
        python -m poetry install --no-dev
        python -m poetry add pytest

    - name: Test with pytest
      continue-on-error: false
      if: success()
      run: |
        python -m pytest -s
    
    - name: Print success message
      run: echo "All tests passed"


  publish:

    if: github.ref == 'refs/heads/dev' && github.ref == 'refs/tags/v0.1.*' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4.1.1

    - name: Set up Python
      uses: actions/setup-python@v4.2.0
      with:
        python-version: '3.10'

    - name: Install dependencies
      continue-on-error: false
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        python -m poetry config virtualenvs.create false
        python -m poetry install --no-dev

    - name: Setup poetry for testpypi
      continue-on-error: false
      run: | 
        python -m poetry config repositories.testpypi https://test.pypi.org/legacy/
        python -m poetry config pypi-token.testpypi ${{ secrets.TESTPYPI_API_TOKEN }}

    - name: Build and publish
      run: |
        python -m poetry build
        python -m poetry publish -r testpypi
